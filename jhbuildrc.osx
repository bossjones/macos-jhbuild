# -*- mode: python -*-
#
# Copyright (C) 2006, 2007, 2008 Imendio AB
# Copyright 2009, 2010, 2011 John Ralls, Fremont, CA
# Copyright 2016 Philip Chimento
#
# Default setup for building GTK+ on Mac OS X. Note that you should
# normally never need to edit this file. Any custom settings should be
# done in ~/.jhbuildrc-custom.

import sys
import re
import os

_home = os.path.expanduser('~')

# module_extra_env['libgdata'] = { "CFLAGS": "-Wno-error=unused-function" }
# module_extra_env['grilo-plugins'] = { "CFLAGS": "-Wno-error" }

def _popen(cmd_arg):
    from subprocess import Popen, PIPE
    devnull = open('/dev/null')
    cmd = Popen(cmd_arg, stdout=PIPE, stderr=devnull, shell=True)
    retval = cmd.stdout.read().strip()
    err = cmd.wait()
    cmd.stdout.close()
    devnull.close()
    if err:
        raise RuntimeError, 'Failed to close %s stream' % cmd_arg
    return retval

# Determine the native system:
def osx_ver():
    vstring = _popen('uname -r')
    mstring = _popen('machine')
    exp = re.compile(r'(\d+\.\d+)\.\d+')
    vernum = exp.match(vstring)
    return float(vernum.group(1)) - 4.0

# Determine the XCode Version:
def xcode_ver():
    devdir = _popen('xcode-select -p')
    if devdir != '/Library/Developer/CommandLineTools':
        ver = _popen('xcodebuild -version')
        exp = re.compile(r'Xcode (\d+\.\d+)')
        vernum = exp.match(ver)
        if vernum:
            _xcode_ver = float(vernum.group(1))
            if _xcode_ver < 5.0:
                raise EnvironmentError('Xcode Version %f is not supported. Xcode 5.0 or later is required.' % _xcode_ver)
            return _xcode_ver
        raise EnvironmentError('No suitable Xcode found. Xcode 5.0 or later is required.')
    else:  # Command-Line Tools instead of Xcode
        ver_str = _popen('pkgutil --pkg-info=com.apple.pkg.CLTools_Executables | grep version*')
        exp = re.compile(r'version: (\d+\.\d+)')
        vernum = exp.match(ver_str)
        if vernum:
            return float(vernum.group(1))
        return 8.0

# Some utility functions used here and in custom files:

def environ_append(key, value, separator=' '):
    old_value = os.environ.get(key)
    if old_value is not None:
        value = old_value + separator + value
    os.environ[key] = value

def environ_prepend(key, value, separator=' '):
    old_value = os.environ.get(key)
    if old_value is not None:
        value = value + separator + old_value
    os.environ[key] = value

def environ_remove(key, value, separator=':'):
    old_value = os.environ.get(key)
    if old_value is not None:
        old_value_split = old_value.split(separator)
        value_split = [x for x in old_value_split if x != value]
        value = separator.join(value_split)
    os.environ[key] = value

def append_module_extra_env(module, var, value, separator=' '):
    extra_env = module_extra_env.get(module, {})
    old_value = extra_env.get(var, os.environ[var])
    new_value = old_value + separator + value
    extra_env[var] = new_value
    module_extra_env[module] = extra_env

def append_autogenargs(module, args):
    old_value = module_autogenargs.get(module, autogenargs)
    module_autogenargs[module] = old_value + ' ' + args

def remove_autogenargs(module, args):
    arg_string = module_autogenargs.get(module, autogenargs)
    module_autogenargs[module] = arg_string.replace(args, '')

# Call either setup_debug or setup_release in your .jhbuildrc-custom
# or other customization file to get the compilation flags.
def setup_debug():
    environ_prepend('CFLAGS', '-O0 -ggdb')
    # NOTE: https://stackoverflow.com/questions/5311515/gcc-fpic-option
    environ_prepend('CFLAGS', '-fPIC -fno-inline -fno-omit-frame-pointer')
    environ_prepend('CXXFLAGS', '-O0 -g')
    environ_prepend('OBJCFLAGS', '-O0 -g')

def setup_release():
    environ_prepend('CFLAGS', '-O2')
    environ_prepend('CXXFLAGS', '-O2')
    environ_prepend('OBJCFLAGS', '-O2')


def get_python_site_packages_from_pyenv(_py_version="3.5.2"):
    return _home + ".pyenv/versions/" + _py_version + "/lib"

# Set up the environment for building against particular SDK.
# This is the workhorse of the setup. Call this function from
# .jhbuildrc-custom to configure compile and link flags. Optionally
# specify a minimum MacOS version (10.9, 10.10, 10.11, etc.)
#
# For most users accepting the defaults is the right course.
def setup_sdk(target=None):
    xcodeversion = xcode_ver()
    osx_version = osx_ver()

    if target is None:
        target = '10.%d' % osx_version

    os.environ['MACOSX_DEPLOYMENT_TARGET'] = target

    sdkdir = _popen('xcrun --show-sdk-path')

    if sdkdir:
        sdk_includedir = os.path.join(sdkdir, 'usr', 'include')
        sdk_libdir = os.path.join(sdkdir, 'usr', 'lib')

        environ_prepend('LDFLAGS', '-L' + sdk_libdir)
        environ_prepend('CFLAGS', '-I' + sdk_includedir)
        environ_prepend('CXXFLAGS', '-I' + sdk_includedir)
        environ_prepend('OBJCFLAGS', '-I' + sdk_includedir)
        environ_prepend('CPPFLAGS', '-I' + sdk_includedir)
        environ_prepend('CMAKE_PREFIX_PATH', os.path.join(sdkdir, 'usr'), ':')
        environ_prepend('LIBRARY_PATH', sdk_libdir, ':')

        # It's often necessary to look for things in the SDK when
        # developing, and it takes a lot of typing, so define a
        # convenience environment variable:
        environ_append('SDKDIR', sdkdir)
        environ_append('SDKROOT', sdkdir)

        # Apple Documentation says that "-syslibroot" is the arg to pass to the
        # linker, but we are using the compiler to control the linker, and
        # everything seems to be working correctly.
        environ_append('CFLAGS', '-isysroot ' + sdkdir)
        environ_append('CPPFLAGS', '-isysroot ' + sdkdir)
        environ_append('CXXFLAGS', '-isysroot ' + sdkdir)
        environ_append('OBJCFLAGS', '-isysroot ' + sdkdir)
        environ_append('LDFLAGS', '-isysroot ' + sdkdir)

        # To pick up cups-config from the right place.
        os.environ['CUPS_CONFIG'] = os.path.join(sdkdir, 'usr', 'bin', 'cups-config')

    environ_append('CFLAGS', '-mmacosx-version-min=' + target)
    environ_append('CXXFLAGS', '-mmacosx-version-min=' + target)
    environ_append('OBJCFLAGS', '-mmacosx-version-min=' + target)
    environ_append('LDFLAGS', '-mmacosx-version-min=' + target)

    gcc = _popen('xcrun -f gcc')
    gpp = _popen('xcrun -f g++')
    ld = _popen('xcrun -f ld')
    os.environ['CC'] = gcc
    os.environ['OBJC'] = gcc
    os.environ['CXX'] = gpp
    os.environ['LD'] = ld

    # El Capitan needs bash to work around SIP. If you're using a
    # common bootstrap directory (e.g. $HOME/.local) then override
    # CONFIG_SHELL in .jhbuildrc-custom after calling setup_sdk().
    config_shell = os.path.join(prefix, 'bin', 'bash')
    if osx_version < 11.0:
        skip.append('bash')
    elif os.path.exists(config_shell):
        os.environ['CONFIG_SHELL'] = config_shell

    if not sdkdir:
        sdkdir = '/'
    if os.path.exists(os.path.join(sdkdir, 'usr', 'include', 'openssl')):
        skip.append('openssl')  # openssl removed in El Capitan

    # macOS ships libuuid, but no pkg-config file. Symbols are in libSystem, per
    # http://lists.apple.com/archives/unix-porting/2009/Aug/msg00006.html
    skip.append('libuuid')
    os.environ['UUID_CFLAGS'] = '-I' + os.path.join(sdk_includedir, 'uuid')
    os.environ['UUID_LIBS'] = '-lSystem'

    return sdkdir

###### End Function Definitions  #######

##### The following configuration can be overridden in custom files ######

# Check and warn if jhbuild is started from within jhbuild, since that
# will mess up environment variables, especially if different build
# setups are used.
if os.environ.get('JHBUILD_PREFIX', '') != '':
    print 'Warning: jhbuild is started from within a jhbuild session.'

# Moduleset to use. You can override this in .jhbuildrc-custom or on
# the command line.
moduleset = [
    'gnome-apps-3.22',
    'macos-sysdeps',
    'macos-overrides',
]

# A list of the modules to build. You can override this in
# .jhbuildrc-custom or on the command line.
modules = [ 'meta-gnome-extended-devel-platform' ]

# Use the included install-check program if available. It won't update
# timestamps if the header hasn't changed, which speeds up builds.
_path = os.path.expanduser('~/.local/bin/install-check')
if os.path.exists(_path):
    os.environ['INSTALL'] = _path

conditions.add('64-bit')

# Modules that have new enough versions shipped with macOS >= 10.9
skip.append('m4')

# The option "headerpad_max_install_names" is there to leave some room for
# changing the library locations with install_name_tool. Note that GNU
# libtool seems to drop the option if we don't use -W here.
environ_append('LDFLAGS', '-Wl,-headerpad_max_install_names')
# Make sure we don't link against XQuartz whose freetype-config is on PATH
# when XQuartz is installed by removing it from PATH
environ_remove('PATH', '/opt/X11/bin')

# Glib has issues with endianness
append_autogenargs('glib', 'ac_cv_c_bigendian=no')
# Set glib's build parameter so that it builds the
# correct atomic asm functions
append_autogenargs('glib', '--build=x86_64-apple-darwin')
append_autogenargs('gmp', '--host=x86_64-apple-darwin ABI=64')
append_autogenargs('gnutls', '--host=x86_64-apple-darwin')
# Need to override the global autogenargs for libnettle, since otherwise
# --disable-static will be added after it
module_autogenargs['libnettle'] = '--enable-static'

###### Import Customizations ######

# Import optional user RC for further customization. You can override
# the prefix or default build setup for example, or CFLAGS or
# module_autogenargs, etc.
#
_userrc = os.path.join(os.environ['HOME'], '.jhbuildrc-custom')
if os.path.exists(_userrc):
    execfile(_userrc)

###### Everything Below Uses (and Overrides) customizations! #######

# Any changes to packages that affect environment variables, or make use of the
# "prefix", "checkoutroot", or "tarballdir" variables, must occur below here.

os.environ['JHBUILD_PREFIX'] = prefix
os.environ['JHBUILD_SOURCE'] = checkoutroot

_libdir = os.path.join(prefix, 'lib')

# Make sure we find our installed modules before other versions.
environ_prepend('LDFLAGS', '-L' + _libdir)
environ_prepend('CPPFLAGS', '-I' + prefix + '/include')

# Some autogens detect that it's a Mac and use glibtoolize if it's
# available. Override this behavior.
os.environ.setdefault('LIBTOOLIZE', os.path.join(prefix, 'bin', 'libtoolize'))

# Make sure that ltdl can find our libraries
addpath('LTDL_LIBRARY_PATH', _libdir)

# Not sure why this is not autodetected
append_module_extra_env('glade', 'CFLAGS', '-ObjC')

# openssl doesn't understand DESTDIR, but luckily it has its own mechanism.
module_extra_env['openssl'] = {
    'INSTALL_PREFIX': os.path.join(prefix, '_jhbuild', 'root-openssl'),
}

# This is how to get cmake to set -install_name
cmakeargs += ' -DCMAKE_INSTALL_NAME_DIR=' + _libdir

# Find our docbook XML catalogs
os.environ['XML_CATALOG_FILES'] = os.path.join(prefix, 'share', 'xml',
    'catalog')

# Overcome Python's obnoxious misconfiguration of portable builds
os.environ['BUILDCFLAGS'] = os.environ['CFLAGS']
# Finally when building normally we need to force CFLAGS_FOR_BUILD
# to our current CFLAGS so that everything will link with other
# build products. Note that this will generally break
# cross-compilation, not that it works anyway.
os.environ['CFLAGS_FOR_BUILD'] = os.environ['CFLAGS']


# interact = False
# makeargs = '-j4 V=1'
# module_autogenargs['gtk-doc'] = 'PYTHON=/usr/bin/python3'
# os.environ['CFLAGS'] = '-fPIC -O0 -ggdb -fno-inline -fno-omit-frame-pointer'
os.environ['PYTHON'] = 'python3'
os.environ['GSTREAMER'] = '1.0'
os.environ['ENABLE_PYTHON3'] = 'yes'
os.environ['ENABLE_GTK'] = 'yes'
os.environ['PYTHON_VERSION'] = '3.5'
# os.environ['CFLAGS'] = '-fPIC -O0 -ggdb -fno-inline -fno-omit-frame-pointer'
os.environ['MAKEFLAGS'] = '-j4 V=1'
makeargs = '-j4 V=1'
os.environ['PREFIX'] = "{_home}/jhbuild".format(_home=_home)
os.environ['JHBUILD'] = "{_home}/gnome".format(_home=_home)

# os.environ['LD_LIBRARY_PATH'] = '{_home}/jhbuild/lib:{_home}/.virtualenvs/scarlett_os/lib'.format(_home=_home)
environ_prepend('LD_LIBRARY_PATH', "/usr/lib")
environ_prepend('LD_LIBRARY_PATH', "/usr/local/lib")
environ_prepend('LD_LIBRARY_PATH', "{_home}/.virtualenvs/scarlett_os3/lib".format(_home=_home))
environ_prepend('LD_LIBRARY_PATH', "{_home}/jhbuild".format(_home=_home) + "/lib")

# os.environ['PYTHONPATH'] = '{_home}/jhbuild/lib/python3.5/site-packages:/usr/lib/python3.5/site-packages'.format(_home=_home)
if os.path.exists('/usr/lib/python3.5/site-packages'):
    environ_prepend('PYTHONPATH', "/usr/lib/python3.5/site-packages")

_python_site_packages = get_python_site_packages_from_pyenv()

if os.path.exists(_python_site_packages):
    environ_prepend('PYTHONPATH', _python_site_packages)

environ_prepend('PYTHONPATH', "{_home}/jhbuild/lib/python3.5/site-packages".format(_home=_home))

# os.environ['PKG_CONFIG_PATH'] = '{_home}/jhbuild/lib/pkgconfig:{_home}/jhbuild/share/pkgconfig:/usr/lib/pkgconfig'.format(_home=_home)
environ_prepend('PKG_CONFIG_PATH', "/usr/lib/pkgconfig")
if os.path.exists('/usr/local/lib/pkgconfig'):
    environ_prepend('PKG_CONFIG_PATH', "/usr/local/lib/pkgconfig")
environ_prepend('PKG_CONFIG_PATH', "{_home}/jhbuild/share/pkgconfig".format(_home=_home))
environ_prepend('PKG_CONFIG_PATH', "{_home}/jhbuild/share/pkgconfig".format(_home=_home))
environ_prepend('PKG_CONFIG_PATH', "{_home}/jhbuild/lib/pkgconfig".format(_home=_home))


# os.environ['XDG_DATA_DIRS'] = '{_home}/jhbuild/share:/usr/share'.format(_home=_home)
environ_prepend('XDG_DATA_DIRS', "/usr/share")
environ_prepend('XDG_DATA_DIRS', "{_home}/jhbuild/share".format(_home=_home))

# os.environ['XDG_CONFIG_DIRS'] = '{_home}/jhbuild/etc/xdg'.format(_home=_home)
environ_prepend('XDG_CONFIG_DIRS', "{_home}/jhbuild/etc/xdg".format(_home=_home))

# os.environ['PATH'] = '/usr/lib/ccache:{_home}/bin:{_home}/jhbuild/bin:{_home}/jhbuild/sbin:/usr/local/bin:/usr/local/sbin:/usr/lib/ccache:{_home}/bin:{_home}/jhbuild/bin:{_home}/jhbuild/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'.format(_home=_home)
os.environ['CC'] = 'gcc'
os.environ['PROJECT_HOME'] = "{_home}/dev".format(_home=_home)
os.environ['WORKON_HOME'] = "{_home}/.virtualenvs".format(_home=_home)

# os.environ['VIRTUALENVWRAPPER_PYTHON'] = '/usr/local/bin/python3'
os.environ['VIRTUALENVWRAPPER_PYTHON'] = "{_home}/.pyenv/versions/3.5.2/bin/python3".format(_home=_home)
# os.environ['VIRTUALENVWRAPPER_VIRTUALENV'] = '/usr/local/bin/virtualenv'
os.environ['VIRTUALENVWRAPPER_PYTHON'] = "{_home}/.pyenv/versions/3.5.2/bin/virtualenv".format(_home=_home)
# os.environ['CCACHE_DIR'] = '/ccache'


