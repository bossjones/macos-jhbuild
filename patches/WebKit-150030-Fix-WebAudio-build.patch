--- a/Source/WebCore/platform/audio/Biquad.cpp	
+++ a/Source/WebCore/platform/audio/Biquad.cpp	
@@ -37,7 +37,7 @@ 
 #include <stdio.h>
 #include <wtf/MathExtras.h>
 
-#if OS(DARWIN)
+#if USE(ACCELERATE)
 // Work around a bug where VForce.h forward declares std::complex in a way that's incompatible with libc++ complex.
 #define __VFORCE_H
 #include <Accelerate/Accelerate.h>
@@ -45,13 +45,13 @@ 
 
 namespace WebCore {
 
-#if OS(DARWIN)
+#if USE(ACCELERATE)
 const int kBufferSize = 1024;
 #endif
 
 Biquad::Biquad()
 {
-#if OS(DARWIN)
+#if USE(ACCELERATE)
     // Allocate two samples more for filter history
     m_inputBuffer.allocate(kBufferSize + 2);
     m_outputBuffer.allocate(kBufferSize + 2);
@@ -69,7 +69,7 @@ Biquad::~Biquad()
 
 void Biquad::process(const float* sourceP, float* destP, size_t framesToProcess)
 {
-#if OS(DARWIN)
+#if USE(ACCELERATE)
     // Use vecLib if available
     processFast(sourceP, destP, framesToProcess);
 
@@ -118,7 +118,7 @@ void Biquad::process(const float* sourceP, float* destP, size_t framesToProcess)
 #endif
 }
 
-#if OS(DARWIN)
+#if USE(ACCELERATE)
 
 // Here we have optimized version using Accelerate.framework
 
@@ -172,12 +172,12 @@ void Biquad::processSliceFast(double* sourceP, double* destP, double* coefficien
     destP[1] = destP[framesToProcess - 1 + 2];
 }
 
-#endif // OS(DARWIN)
+#endif // USE(ACCELERATE)
 
 
 void Biquad::reset()
 {
-#if OS(DARWIN)
+#if USE(ACCELERATE)
     // Two extra samples for filter history
     double* inputP = m_inputBuffer.data();
     inputP[0] = 0;
--- a/Source/WebCore/platform/audio/Biquad.h	
+++ a/Source/WebCore/platform/audio/Biquad.h	
@@ -88,7 +88,7 @@ private:
     double m_a1;
     double m_a2;
 
-#if OS(DARWIN)
+#if USE(ACCELERATE)
     void processFast(const float* sourceP, float* destP, size_t framesToProcess);
     void processSliceFast(double* sourceP, double* destP, double* coefficientsP, size_t framesToProcess);
 
--- a/Source/WebCore/platform/audio/DirectConvolver.cpp	
+++ a/Source/WebCore/platform/audio/DirectConvolver.cpp	
@@ -73,7 +73,7 @@ void DirectConvolver::process(AudioFloatArray* convolutionKernel, const float* s
     // Copy samples to 2nd half of input buffer.
     memcpy(inputP, sourceP, sizeof(float) * framesToProcess);
 
-#if OS(DARWIN)
+#if USE(ACCELERATE)
 #if defined(__ppc__) || defined(__i386__)
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wdeprecated-declarations"
@@ -352,7 +352,7 @@ void DirectConvolver::process(AudioFloatArray* convolutionKernel, const float* s
         }
         destP[i++] = sum;
     }
-#endif // OS(DARWIN)
+#endif // USE(ACCELERATE)
 
     // Copy 2nd half of input buffer to 1st half.
     memcpy(m_buffer.data(), inputP, sizeof(float) * framesToProcess);
--- a/Source/WebCore/platform/audio/FFTFrame.h	
+++ a/Source/WebCore/platform/audio/FFTFrame.h	
@@ -31,10 +31,6 @@ 
 
 #include "AudioArray.h"
 
-#if OS(DARWIN)
-#include <Accelerate/Accelerate.h>
-#endif
-
 #if USE(WEBAUDIO_GSTREAMER)
 #include <glib.h>
 G_BEGIN_DECLS
@@ -42,6 +38,10 @@ G_BEGIN_DECLS
 G_END_DECLS
 #endif // USE(WEBAUDIO_GSTREAMER)
 
+#if USE(ACCELERATE)
+#include <Accelerate/Accelerate.h>
+#endif
+
 #include <memory>
 #include <wtf/Forward.h>
 #include <wtf/Threading.h>
@@ -90,7 +90,7 @@ private:
 
     void interpolateFrequencyComponents(const FFTFrame& frame1, const FFTFrame& frame2, double x);
 
-#if OS(DARWIN)
+#if USE(ACCELERATE)
     DSPSplitComplex& dspSplitComplex() { return m_frame; }
     DSPSplitComplex dspSplitComplex() const { return m_frame; }
 
--- a/Source/WebCore/platform/audio/VectorMath.cpp	
+++ a/Source/WebCore/platform/audio/VectorMath.cpp	
@@ -28,7 +28,7 @@ 
 
 #include "VectorMath.h"
 
-#if OS(DARWIN)
+#if USE(ACCELERATE)
 #include <Accelerate/Accelerate.h>
 #endif
 
@@ -47,7 +47,7 @@ namespace WebCore {
 
 namespace VectorMath {
 
-#if OS(DARWIN)
+#if USE(ACCELERATE)
 // On the Mac we use the highly optimized versions in Accelerate.framework
 // In 32-bit mode (__ppc__ or __i386__) <Accelerate/Accelerate.h> includes <vecLib/vDSP_translate.h> which defines macros of the same name as
 // our namespaced function names, so we must handle this case differently. Other architectures (64bit, ARM, etc.) do not include this header file.
@@ -690,7 +690,7 @@ void vclip(const float* sourceP, int sourceStride, const float* lowThresholdP, c
     }
 }
 
-#endif // OS(DARWIN)
+#endif // USE(ACCELERATE)
 
 } // namespace VectorMath
 
