import os
import sys
import re

# def _popen(cmd_arg):
#     from subprocess import Popen, PIPE
#     devnull = open('/dev/null')
#     cmd = Popen(cmd_arg, stdout=PIPE, stderr=devnull, shell=True)
#     retval = cmd.stdout.read().strip()
#     err = cmd.wait()
#     cmd.stdout.close()
#     devnull.close()
#     if err:
#         raise RuntimeError, 'Failed to close %s stream' % cmd_arg
#     return retval

# # Determine the native system:
# def osx_ver():
#     vstring = _popen('uname -r')
#     mstring = _popen('machine')
#     exp = re.compile(r'(\d+\.\d+)\.\d+')
#     vernum = exp.match(vstring)
#     return float(vernum.group(1)) - 4.0

# # Determine the XCode Version:
# def xcode_ver():
#     devdir = _popen('xcode-select -p')
#     if devdir != '/Library/Developer/CommandLineTools':
#         ver = _popen('xcodebuild -version')
#         exp = re.compile(r'Xcode (\d+\.\d+)')
#         vernum = exp.match(ver)
#         if vernum:
#             _xcode_ver = float(vernum.group(1))
#             if _xcode_ver < 5.0:
#                 raise EnvironmentError('Xcode Version %f is not supported. Xcode 5.0 or later is required.' % _xcode_ver)
#             return _xcode_ver
#         raise EnvironmentError('No suitable Xcode found. Xcode 5.0 or later is required.')
#     else:  # Command-Line Tools instead of Xcode
#         ver_str = _popen('pkgutil --pkg-info=com.apple.pkg.CLTools_Executables | grep version*')
#         exp = re.compile(r'version: (\d+\.\d+)')
#         vernum = exp.match(ver_str)
#         if vernum:
#             return float(vernum.group(1))
#         return 8.0

# # Some utility functions used here and in custom files:

# def environ_append(key, value, separator=' '):
#     old_value = os.environ.get(key)
#     if old_value is not None:
#         value = old_value + separator + value
#     os.environ[key] = value

# def environ_prepend(key, value, separator=' '):
#     old_value = os.environ.get(key)
#     if old_value is not None:
#         value = value + separator + old_value
#     os.environ[key] = value

# def environ_remove(key, value, separator=':'):
#     old_value = os.environ.get(key)
#     if old_value is not None:
#         old_value_split = old_value.split(separator)
#         value_split = [x for x in old_value_split if x != value]
#         value = separator.join(value_split)
#     os.environ[key] = value

# def append_module_extra_env(module, var, value, separator=' '):
#     extra_env = module_extra_env.get(module, {})
#     old_value = extra_env.get(var, os.environ[var])
#     new_value = old_value + separator + value
#     extra_env[var] = new_value
#     module_extra_env[module] = extra_env

# def append_autogenargs(module, args):
#     old_value = module_autogenargs.get(module, autogenargs)
#     module_autogenargs[module] = old_value + ' ' + args

# def remove_autogenargs(module, args):
#     arg_string = module_autogenargs.get(module, autogenargs)
#     module_autogenargs[module] = arg_string.replace(args, '')

# # Call either setup_debug or setup_release in your .jhbuildrc-custom
# # or other customization file to get the compilation flags.
# def setup_debug():
#     environ_prepend('CFLAGS', '-O0 -g')
#     environ_prepend('CXXFLAGS', '-O0 -g')
#     environ_prepend('OBJCFLAGS', '-O0 -g')

# def setup_release():
#     environ_prepend('CFLAGS', '-O2')
#     environ_prepend('CXXFLAGS', '-O2')
#     environ_prepend('OBJCFLAGS', '-O2')

# # Set up the environment for building against particular SDK.
# # This is the workhorse of the setup. Call this function from
# # .jhbuildrc-custom to configure compile and link flags. Optionally
# # specify a minimum MacOS version (10.9, 10.10, 10.11, etc.)
# #
# # For most users accepting the defaults is the right course.
# def setup_sdk(target=None):
#     xcodeversion = xcode_ver()
#     osx_version = osx_ver()

#     if target is None:
#         target = '10.%d' % osx_version

#     os.environ['MACOSX_DEPLOYMENT_TARGET'] = target

#     sdkdir = _popen('xcrun --show-sdk-path')

#     if sdkdir:
#         sdk_includedir = os.path.join(sdkdir, 'usr', 'include')
#         sdk_libdir = os.path.join(sdkdir, 'usr', 'lib')

#         environ_prepend('LDFLAGS', '-L' + sdk_libdir)
#         environ_prepend('CFLAGS', '-I' + sdk_includedir)
#         environ_prepend('CXXFLAGS', '-I' + sdk_includedir)
#         environ_prepend('OBJCFLAGS', '-I' + sdk_includedir)
#         environ_prepend('CPPFLAGS', '-I' + sdk_includedir)
#         environ_prepend('CMAKE_PREFIX_PATH', os.path.join(sdkdir, 'usr'), ':')
#         environ_prepend('LIBRARY_PATH', sdk_libdir, ':')

#         # It's often necessary to look for things in the SDK when
#         # developing, and it takes a lot of typing, so define a
#         # convenience environment variable:
#         environ_append('SDKDIR', sdkdir)
#         environ_append('SDKROOT', sdkdir)

#         # Apple Documentation says that "-syslibroot" is the arg to pass to the
#         # linker, but we are using the compiler to control the linker, and
#         # everything seems to be working correctly.
#         environ_append('CFLAGS', '-isysroot ' + sdkdir)
#         environ_append('CPPFLAGS', '-isysroot ' + sdkdir)
#         environ_append('CXXFLAGS', '-isysroot ' + sdkdir)
#         environ_append('OBJCFLAGS', '-isysroot ' + sdkdir)
#         environ_append('LDFLAGS', '-isysroot ' + sdkdir)

#         # To pick up cups-config from the right place.
#         os.environ['CUPS_CONFIG'] = os.path.join(sdkdir, 'usr', 'bin', 'cups-config')

#     environ_append('CFLAGS', '-mmacosx-version-min=' + target)
#     environ_append('CXXFLAGS', '-mmacosx-version-min=' + target)
#     environ_append('OBJCFLAGS', '-mmacosx-version-min=' + target)
#     environ_append('LDFLAGS', '-mmacosx-version-min=' + target)

#     gcc = _popen('xcrun -f gcc')
#     gpp = _popen('xcrun -f g++')
#     ld = _popen('xcrun -f ld')
#     os.environ['CC'] = gcc
#     os.environ['OBJC'] = gcc
#     os.environ['CXX'] = gpp
#     os.environ['LD'] = ld

#     # El Capitan needs bash to work around SIP. If you're using a
#     # common bootstrap directory (e.g. $HOME/.local) then override
#     # CONFIG_SHELL in .jhbuildrc-custom after calling setup_sdk().
#     config_shell = os.path.join(prefix, 'bin', 'bash')
#     if osx_version < 11.0:
#         skip.append('bash')
#     elif os.path.exists(config_shell):
#         os.environ['CONFIG_SHELL'] = config_shell

#     if not sdkdir:
#         sdkdir = '/'
#     if os.path.exists(os.path.join(sdkdir, 'usr', 'include', 'openssl')):
#         skip.append('openssl')  # openssl removed in El Capitan

#     # macOS ships libuuid, but no pkg-config file. Symbols are in libSystem, per
#     # http://lists.apple.com/archives/unix-porting/2009/Aug/msg00006.html
#     skip.append('libuuid')
#     os.environ['UUID_CFLAGS'] = '-I' + os.path.join(sdk_includedir, 'uuid')
#     os.environ['UUID_LIBS'] = '-lSystem'

#     return sdkdir

###### End Function Definitions  #######


_home = os.path.expanduser('~')

_basepath = os.path.dirname(__file__)

# prefix='{_home}}/jhbuild'.format(_home=_home)
# checkoutroot='{_home}}/gnome'.format(_home=_home)
moduleset = [
    'bootstrap',
    # 'gnome-apps-3.20'
]

checkoutroot = os.path.join(_home, 'jhbuild')
prefix = os.path.join(_home, 'gnome')

build_policy = 'updated-deps'

os.environ['LDFLAGS'] = '-Wl,-rpath,' + os.path.join(prefix, 'lib') \
                        + ' -Wl,-rpath,' + os.path.join(prefix, 'lib64') \
                        + os.environ.get('LDFLAGS', '')

addpath('PKG_CONFIG_PATH', os.path.join(prefix, 'lib/pkgconfig'))
addpath('PKG_CONFIG_PATH', os.path.join(prefix, 'lib64/pkgconfig'))
addpath('PKG_CONFIG_PATH', '/usr/lib/pkgconfig')
addpath('PKG_CONFIG_PATH', '/usr/share/pkgconfig')


# interact = False
# makeargs = '-j4 V=1'
# module_autogenargs['gtk-doc'] = 'PYTHON=/usr/bin/python3'
# os.environ['CFLAGS'] = '-fPIC -O0 -ggdb -fno-inline -fno-omit-frame-pointer'
# os.environ['PYTHON'] = 'python3'
# os.environ['GSTREAMER'] = '1.0'
# os.environ['ENABLE_PYTHON3'] = 'yes'
# os.environ['ENABLE_GTK'] = 'yes'
# os.environ['PYTHON_VERSION'] = '3.5'
# os.environ['CFLAGS'] = '-fPIC -O0 -ggdb -fno-inline -fno-omit-frame-pointer'
# os.environ['MAKEFLAGS'] = '-j4 V=1'
# os.environ['PREFIX'] = '{_home}}/jhbuild'.format(_home=_home)
# os.environ['JHBUILD'] = '{_home}}/gnome'.format(_home=_home)
# os.environ['PATH'] = '/usr/lib/ccache:{_home}}/bin:{_home}}/jhbuild/bin:{_home}}/jhbuild/sbin:/usr/local/bin:/usr/local/sbin:/usr/lib/ccache:{_home}}/bin:{_home}}/jhbuild/bin:{_home}}/jhbuild/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'.format(_home=_home)
# os.environ['LD_LIBRARY_PATH'] = '{_home}}/jhbuild/lib:{_home}}/.virtualenvs/scarlett_os/lib'.format(_home=_home)
# os.environ['PYTHONPATH'] = '{_home}}/jhbuild/lib/python3.5/site-packages:/usr/lib/python3.5/site-packages'.format(_home=_home)
# os.environ['PKG_CONFIG_PATH'] = '{_home}}/jhbuild/lib/pkgconfig:{_home}}/jhbuild/share/pkgconfig:/usr/lib/pkgconfig'.format(_home=_home)
# os.environ['XDG_DATA_DIRS'] = '{_home}}/jhbuild/share:/usr/share'.format(_home=_home)
# os.environ['XDG_CONFIG_DIRS'] = '{_home}}/jhbuild/etc/xdg'.format(_home=_home)
# os.environ['CC'] = 'gcc'
# os.environ['WORKON_HOME'] = '{_home}}/.virtualenvs'.format(_home=_home)
# os.environ['PROJECT_HOME'] = '{_home}}/dev'.format(_home=_home)
# os.environ['VIRTUALENVWRAPPER_PYTHON'] = '/usr/local/bin/python3'
# os.environ['VIRTUALENVWRAPPER_VIRTUALENV'] = '/usr/local/bin/virtualenv'
# os.environ['CCACHE_DIR'] = '/ccache'

